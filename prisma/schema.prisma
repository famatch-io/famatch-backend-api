// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int                @id @default(autoincrement())
  username      String
  cognitoSubId  String             @unique
  orgs          UserOrginization[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  notifications Notification[]
  // subscriptions UserSubscription[]
  repos         Repository[]
}

model Orginization {
  id        Int                @id @default(autoincrement())
  name      String
  spaces    Space[]
  userOrgs  UserOrginization[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([name], name: "orginization_index")
}

model Space {
  id        Int          @id @default(autoincrement())
  name      String
  orgId     Int
  org       Orginization @relation(fields: [orgId], references: [id])
  repos     Repository[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([name, orgId], name: "space_index")
}

model Repository {
  id         Int      @id @default(autoincrement())
  name       String
  spaceId    Int
  space      Space    @relation(fields: [spaceId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  uploadDate DateTime
  path       String
  // * text, image, etc...
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([name, spaceId], name: "repository_index")
}

model Role {
  id        Int                @id @default(autoincrement())
  name      String
  userOrg   UserOrginization[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model UserOrginization {
  id        Int          @id @default(autoincrement())
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  orgId     Int
  org       Orginization @relation(fields: [orgId], references: [id])
  roleId    Int
  role      Role         @relation(fields: [roleId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([userId, orgId, roleId], name: "userOrginization_index")
}

model NotificationType {
  id            Int            @id @default(autoincrement())
  name          String
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Notification {
  id                 Int              @id @default(autoincrement())
  userId             Int
  user               User             @relation(fields: [userId], references: [id])
  notificationTypeId Int
  notificationType   NotificationType @relation(fields: [notificationTypeId], references: [id])
  message            String
  readStatus         String
  notificationDate   DateTime
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([userId, notificationTypeId], name: "notification_index")
}

// model SubscriptionTier {
//   id             Int                @id @default(autoincrement())
//   name           String
//   price          Float?
//   subscriptions  UserSubscription[]
//   activityLimits ActivityLimit[]
//   createdAt      DateTime           @default(now())
//   updatedAt      DateTime           @updatedAt
// }

// model UserSubscription {
//   id            Int              @id @default(autoincrement())
//   userId        Int
//   user          User             @relation(fields: [userId], references: [id])
//   tierId        Int
//   tier          SubscriptionTier @relation(fields: [tierId], references: [id])
//   startDate     DateTime
//   endDate       DateTime?
//   billing       Billing[]
//   createdAt     DateTime         @default(now())
//   updatedAt     DateTime         @updatedAt
//   OverageCharge OverageCharge[]

//   @@index([userId, tierId], name: "subscription_index")
// }

// model ActivityType {
//   id            Int             @id @default(autoincrement())
//   name          String
//   activityLimit ActivityLimit[]
//   createdAt     DateTime        @default(now())
//   updatedAt     DateTime        @updatedAt
// }

// model ActivityLimit {
//   id             Int              @id @default(autoincrement())
//   tierId         Int
//   tier           SubscriptionTier @relation(fields: [tierId], references: [id])
//   activityTypeId Int
//   activityType   ActivityType     @relation(fields: [activityTypeId], references: [id])
//   limit          Int
//   createdAt      DateTime         @default(now())
//   updatedAt      DateTime         @updatedAt

//   @@index([tierId, activityTypeId], name: "activity_limit_index")
// }

// model Billing {
//   id             Int              @id @default(autoincrement())
//   subscriptionId Int
//   subscription   UserSubscription @relation(fields: [subscriptionId], references: [id])
//   billingDate    DateTime
//   amountDue      Float
//   dueDate        DateTime
//   paidDate       DateTime?
//   createdAt      DateTime         @default(now())
//   updatedAt      DateTime         @updatedAt
// }

// model OverageCharge {
//   id             Int              @id @default(autoincrement())
//   subscriptionId Int
//   subscription   UserSubscription @relation(fields: [subscriptionId], references: [id])
//   overageAmount  Int
//   charge         Float
//   chargeDate     DateTime
//   createdAt      DateTime         @default(now())
//   updatedAt      DateTime         @updatedAt
// }
